# coding: utf-8
FactoryGirl.define do

#sequence :name do |n|
#  "name_#{n}"
#end

sequence :user do |n|
  "user#{n}"
end

sequence :uid do |n|
  "deadbeef#{n}"
end


basetime = Time.now

sequence :time do |n|
  basetime - n
end

factory :user do
  name { factory.next(:user) }
  shareholder false
  shareholding_percent 0
  created_at Time.now
  updated_at Time.now

  # the after(:create) yields two values; the user instance itself and the
  # evaluator, which stores all values from the factory, including ignored
  # attributes; we make sure the user is associated properly to the user
  after(:create) do |user, evaluator|
    create(:identity, :facebook, user: user)
    create(:identity, :twitter, user: user)
  end

end

def some_user
  User.find(:first) || factory(:user)
end


factory :shareholder, :parent => :user do |u|
  u.shareholder true
  u.shareholding_percent 20
end


factory :identity do
  uid { factory.next(:uid) }

  trait :facebook do
    provider 'Facebook'
  end

  trait :twitter do
    provider 'Twitter'
  end
  user
end




factory :expense do |e|
  e.remarks 'A remark'
  e.amount 10000
  e.category 'Electricity'
  e.expended_date '2014-01-01 02:00:00'
end

factory :no_remarks_expensee, :parent => :expense do |e|
  e.remarks nil
end

def some_expense
  Expense.find(:first) || factory(:expense)
end

factory :second_expense, :parent => :expense do |e|
  e.remarks 'Another expense'
end

end
